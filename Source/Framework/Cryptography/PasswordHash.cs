// Copyright (c) Arctium Emulation.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System.Numerics;
using System.Security.Cryptography;
using System.Text;
using Framework.Database.Bnet;
using Framework.Misc;

namespace Framework.Cryptography
{
    public class PasswordHash
    {
        static byte[] N = new byte[]
        {
            0xAB, 0x24, 0x43, 0x63, 0xA9, 0xC2, 0xA6, 0xC3, 0x3B, 0x37, 0xE4, 0x61, 0x84, 0x25, 0x9F, 0x8B,
            0x3F, 0xCB, 0x8A, 0x85, 0x27, 0xFC, 0x3D, 0x87, 0xBE, 0xA0, 0x54, 0xD2, 0x38, 0x5D, 0x12, 0xB7,
            0x61, 0x44, 0x2E, 0x83, 0xFA, 0xC2, 0x21, 0xD9, 0x10, 0x9F, 0xC1, 0x9F, 0xEA, 0x50, 0xE3, 0x09,
            0xA6, 0xE5, 0x5E, 0x23, 0xA7, 0x77, 0xEB, 0x00, 0xC7, 0xBA, 0xBF, 0xF8, 0x55, 0x8A, 0x0E, 0x80,
            0x2B, 0x14, 0x1A, 0xA2, 0xD4, 0x43, 0xA9, 0xD4, 0xAF, 0xAD, 0xB5, 0xE1, 0xF5, 0xAC, 0xA6, 0x13,
            0x1C, 0x69, 0x78, 0x64, 0x0B, 0x7B, 0xAF, 0x9C, 0xC5, 0x50, 0x31, 0x8A, 0x23, 0x08, 0x01, 0xA1,
            0xF5, 0xFE, 0x31, 0x32, 0x7F, 0xE2, 0x05, 0x82, 0xD6, 0x0B, 0xED, 0x4D, 0x55, 0x32, 0x41, 0x94,
            0x29, 0x6F, 0x55, 0x7D, 0xE3, 0x0F, 0x77, 0x19, 0xE5, 0x6C, 0x30, 0xEB, 0xDE, 0xF6, 0xA7, 0x86
        };

        static BigInteger NBN = N.ToBigInteger();
        static BigInteger gBN = new byte[] { 2 }.ToBigInteger();

        public static byte[] GeneratePasswordVerifier(string email, string password, string salt)
        {
            var sha256 = SHA256.Create();

            var i = sha256.ComputeHash(Encoding.UTF8.GetBytes(email));
            var p = sha256.ComputeHash(Encoding.UTF8.GetBytes(i.ToHexString() + ":" + password));
            var x = sha256.ComputeHash(salt.ToByteArray().Combine(p)).ToBigInteger();

            return BigInteger.ModPow(gBN, x, NBN).ToByteArray();
        }

        public static bool Validate(Account account, string password) => GeneratePasswordVerifier(account.Email, password, account.Salt).Compare(account.PasswordVerifier.ToByteArray());
    }
}
